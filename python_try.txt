EDA----------->
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt

#read data for csv file
df=pd.read_csv('Automobile_data.csv')
print(df)
print(df.head())
print(df.info())
print(df.dtypes)
print(df.describe())
print(df.duplicated().sum())
print(df.dtypes)
print("shape the data",df.shape)
print("null value sum",df.isnull().sum())
print(df['fuel-type'].unique())
#missing value in colums normalized-losses
missingloss=df['normalized-losses'].loc[df['normalized-losses']=='?'].count()
print("number of missing valuein normalized-losses column:",missingloss)

#histogram of the normalize-losses column
df['normalized-losses'].hist(bins=5,color='orange')
plt.title('history of normalized-losses')
plt.ylabel('number if car')
plt.xlabel('Normalized-losses')
plt.show()

#bar char  in column fuel-type
df.make.value_counts().nlargest(3).plot(kind='bar',figsize=(15,5))
plt.title('history of normalized-losses')
plt.ylabel('number if car')
plt.xlabel('makes')
plt.show()

#pie chart column fuel-type
print(df['fuel-type'].head())

Liner-regression----------------------->
import matplotlib.pyplot as plt
from scipy import stats

x = [5,7,8,7,2,17,2,9,4,11,12,9,6]
y = [99,86,87,88,111,86,103,87,94,78,77,85,86]

slope, intercept, r, p, std_err = stats.linregress(x, y)

def myfunc(x):
  return slope * x + intercept

mymodel = list(map(myfunc, x))

plt.scatter(x, y)
plt.plot(x, mymodel)
plt.show()
 # predict the speed of a 10 years old car:
speed = myfunc(10)
print(speed)


Multuple Liner-regression----------------------->

import pandas
from sklearn import linear_model

df = pandas.read_csv("data.csv")

X = df[['Weight', 'Volume']]
y = df['CO2']

regr = linear_model.LinearRegression()
regr.fit(X, y)

#predict the CO2 emission of a car where the weight is 2300kg, and the volume is 1300cm3:
predictedCO2 = regr.predict([[2300, 1300]])

print(predictedCO2)